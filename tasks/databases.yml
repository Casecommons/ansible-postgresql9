---

- name: Ensure that PostgreSQL process or service is running
  service:
    name: postgresql
    state: started
  become: yes

- name: Create the provided PostgreSQL databases
  postgresql_db:
    name: "{{ item.name }}"
    owner: "{{ postgresql_database_owner }}"
    encoding: "{{ postgresql_encoding }}"
    lc_collate: "{{ postgresql_locale }}"
    lc_ctype: "{{ postgresql_locale }}"
    port: "{{ postgresql_port }}"
    template: "template0"
    state: present
    login_user: "{{ postgresql_admin_role }}"
  become: yes
  become_user: "{{ postgresql_admin_role }}"
  with_items: "{{ postgresql_databases }}"
  when: postgresql_databases|length > 0
  ignore_errors: yes

- name: Add the hstore extension to the PostgreSQL databases
  become: yes
  become_user: "{{ postgresql_service_user }}"
  shell: "psql {{ item.name }} --username {{ postgresql_admin_role }} -c 'CREATE EXTENSION IF NOT EXISTS hstore;'"
  with_items: "{{ postgresql_databases }}"
  register: hstore_ext_result
  failed_when: hstore_ext_result.rc != 0 and ('already exists, skipping' not in hstore_ext_result.stderr)
  changed_when: hstore_ext_result.rc == 0 and ('already exists, skipping' not in hstore_ext_result.stderr)
  when: item.hstore is defined and item.hstore

- name: Add the uuid-ossp extension to the PostgreSQL databases
  become: yes
  become_user: "{{ postgresql_service_user }}"
  shell: "psql {{ item.name }} --username {{ postgresql_admin_role }} -c 'CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";'"
  with_items: "{{ postgresql_databases }}"
  register: uuid_ext_result
  failed_when: uuid_ext_result.rc != 0 and ('already exists, skipping' not in uuid_ext_result.stderr)
  changed_when: uuid_ext_result.rc == 0 and ('already exists, skipping' not in uuid_ext_result.stderr)
  when: item.uuid_ossp is defined and item.uuid_ossp
